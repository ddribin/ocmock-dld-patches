diff --git a/Source/OCMock.xcodeproj/project.pbxproj b/Source/OCMock.xcodeproj/project.pbxproj
--- a/Source/OCMock.xcodeproj/project.pbxproj
+++ b/Source/OCMock.xcodeproj/project.pbxproj
@@ -31,6 +31,9 @@
 		03DE219006DB91CF00E5A2A8 /* Foundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 03DE218F06DB91CF00E5A2A8 /* Foundation.framework */; };
 		03DE21B306DB95C500E5A2A8 /* OCMock.h in Headers */ = {isa = PBXBuildFile; fileRef = 03DE21B206DB95C500E5A2A8 /* OCMock.h */; settings = {ATTRIBUTES = (Public, ); }; };
 		03DE221706DB97DA00E5A2A8 /* License.txt in Resources */ = {isa = PBXBuildFile; fileRef = 03DE221606DB97DA00E5A2A8 /* License.txt */; };
+		55A036BC0ED89F270089F431 /* OCMockNotificationObserver.h in Headers */ = {isa = PBXBuildFile; fileRef = 55A036BA0ED89F270089F431 /* OCMockNotificationObserver.h */; settings = {ATTRIBUTES = (Public, ); }; };
+		55A036BD0ED89F270089F431 /* OCMockNotificationObserver.m in Sources */ = {isa = PBXBuildFile; fileRef = 55A036BB0ED89F270089F431 /* OCMockNotificationObserver.m */; };
+		55A036C20ED8A0470089F431 /* OCMockNotificationObserverTests.m in Sources */ = {isa = PBXBuildFile; fileRef = 55A036C10ED8A0470089F431 /* OCMockNotificationObserverTests.m */; };
 		8DC2EF510486A6940098B216 /* OCMock_Prefix.pch in Headers */ = {isa = PBXBuildFile; fileRef = 32DBCF5E0370ADEE00C91783 /* OCMock_Prefix.pch */; };
 		8DC2EF530486A6940098B216 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = 089C1666FE841158C02AAC07 /* InfoPlist.strings */; };
 		9F35D3DC0D349E7E00C05E52 /* OCMock.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 8DC2EF5B0486A6940098B216 /* OCMock.framework */; };
@@ -80,6 +83,10 @@
 		03DE221606DB97DA00E5A2A8 /* License.txt */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = License.txt; sourceTree = "<group>"; };
 		089C1667FE841158C02AAC07 /* English */ = {isa = PBXFileReference; fileEncoding = 10; lastKnownFileType = text.plist.strings; name = English; path = English.lproj/InfoPlist.strings; sourceTree = "<group>"; };
 		32DBCF5E0370ADEE00C91783 /* OCMock_Prefix.pch */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = OCMock_Prefix.pch; sourceTree = "<group>"; };
+		55A036BA0ED89F270089F431 /* OCMockNotificationObserver.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = OCMockNotificationObserver.h; sourceTree = "<group>"; };
+		55A036BB0ED89F270089F431 /* OCMockNotificationObserver.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = OCMockNotificationObserver.m; sourceTree = "<group>"; };
+		55A036C00ED8A0470089F431 /* OCMockNotificationObserverTests.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = OCMockNotificationObserverTests.h; sourceTree = "<group>"; };
+		55A036C10ED8A0470089F431 /* OCMockNotificationObserverTests.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = OCMockNotificationObserverTests.m; sourceTree = "<group>"; };
 		8DC2EF5A0486A6940098B216 /* Info.plist */ = {isa = PBXFileReference; explicitFileType = text.plist.xml; fileEncoding = 4; path = Info.plist; sourceTree = "<group>"; };
 		8DC2EF5B0486A6940098B216 /* OCMock.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = OCMock.framework; sourceTree = BUILT_PRODUCTS_DIR; };
 /* End PBXFileReference section */
@@ -121,6 +128,8 @@
 			children = (
 				03DE1F5E06DB914100E5A2A8 /* OCMockObjectTests.h */,
 				03DE1F5F06DB914100E5A2A8 /* OCMockObjectTests.m */,
+				55A036C00ED8A0470089F431 /* OCMockNotificationObserverTests.h */,
+				55A036C10ED8A0470089F431 /* OCMockNotificationObserverTests.m */,
 				032798010E09F8B7006CA665 /* OCMockObjectHamcrestTests.h */,
 				032798020E09F8B7006CA665 /* OCMockObjectHamcrestTests.mm */,
 				03DE1F6006DB914100E5A2A8 /* OCMockRecorderTests.h */,
@@ -181,6 +190,8 @@
 			children = (
 				03DE1F5406DB911300E5A2A8 /* OCMockObject.h */,
 				03DE1F5506DB911300E5A2A8 /* OCMockObject.m */,
+				55A036BA0ED89F270089F431 /* OCMockNotificationObserver.h */,
+				55A036BB0ED89F270089F431 /* OCMockNotificationObserver.m */,
 				0338A99607BE7C100066DE8A /* OCClassMockObject.h */,
 				0338A99707BE7C100066DE8A /* OCClassMockObject.m */,
 				0338A9EE07BE83B50066DE8A /* OCProtocolMockObject.h */,
@@ -237,6 +248,7 @@
 				0338AA1207BE866F0066DE8A /* NSMethodSignature+Private.h in Headers */,
 				03A2D0CB09F01D13008A1AFD /* NSInvocation+OCMAdditions.h in Headers */,
 				0343133E0CCA771800A2E080 /* OCMConstraint.h in Headers */,
+				55A036BC0ED89F270089F431 /* OCMockNotificationObserver.h in Headers */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -370,6 +382,7 @@
 				030106730A3B9B240049FED7 /* NSInvocationOCMAdditionsTests.m in Sources */,
 				034313EA0CCA7BC700A2E080 /* OCMConstraintTests.m in Sources */,
 				032798030E09F8B7006CA665 /* OCMockObjectHamcrestTests.mm in Sources */,
+				55A036C20ED8A0470089F431 /* OCMockNotificationObserverTests.m in Sources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -383,6 +396,7 @@
 				0338A9F107BE83B50066DE8A /* OCProtocolMockObject.m in Sources */,
 				03A2D0CC09F01D13008A1AFD /* NSInvocation+OCMAdditions.m in Sources */,
 				0343133F0CCA771800A2E080 /* OCMConstraint.m in Sources */,
+				55A036BD0ED89F270089F431 /* OCMockNotificationObserver.m in Sources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
@@ -458,12 +472,12 @@
 				GCC_ENABLE_OBJC_EXCEPTIONS = YES;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = NO;
 				GCC_MODEL_TUNING = G5;
+				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PRECOMPILE_PREFIX_HEADER = YES;
 				GCC_PREFIX_HEADER = OCMock_Prefix.pch;
 				INFOPLIST_FILE = "Test-Info.plist";
 				INSTALL_PATH = "$(USER_LIBRARY_DIR)/Bundles";
 				LIBRARY_STYLE = BUNDLE;
-				OPTIMIZATION_CFLAGS = "-O0";
 				OTHER_CFLAGS = "";
 				OTHER_REZFLAGS = "";
 				PREBINDING = NO;
@@ -505,12 +519,12 @@
 				GCC_ENABLE_OBJC_EXCEPTIONS = YES;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = YES;
 				GCC_MODEL_TUNING = G5;
+				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PRECOMPILE_PREFIX_HEADER = YES;
 				GCC_PREFIX_HEADER = OCMock_Prefix.pch;
 				INFOPLIST_FILE = "Test-Info.plist";
 				INSTALL_PATH = "$(USER_LIBRARY_DIR)/Bundles";
 				LIBRARY_STYLE = BUNDLE;
-				OPTIMIZATION_CFLAGS = "-O0";
 				OTHER_CFLAGS = "";
 				OTHER_REZFLAGS = "";
 				PREBINDING = NO;
@@ -536,12 +550,12 @@
 				GCC_ENABLE_OBJC_EXCEPTIONS = YES;
 				GCC_GENERATE_DEBUGGING_SYMBOLS = NO;
 				GCC_MODEL_TUNING = G5;
+				GCC_OPTIMIZATION_LEVEL = 0;
 				GCC_PRECOMPILE_PREFIX_HEADER = YES;
 				GCC_PREFIX_HEADER = OCMock_Prefix.pch;
 				INFOPLIST_FILE = "Test-Info.plist";
 				INSTALL_PATH = "$(USER_LIBRARY_DIR)/Bundles";
 				LIBRARY_STYLE = BUNDLE;
-				OPTIMIZATION_CFLAGS = "-O0";
 				OTHER_CFLAGS = "";
 				OTHER_REZFLAGS = "";
 				PREBINDING = NO;
@@ -582,7 +596,6 @@
 				LIBRARY_SEARCH_PATHS = "";
 				LIBRARY_STYLE = Dynamic;
 				MACH_O_TYPE = mh_dylib;
-				OPTIMIZATION_CFLAGS = "-O0";
 				OTHER_CFLAGS = "-fobjc-exceptions";
 				OTHER_LDFLAGS = "";
 				PRODUCT_NAME = OCMock;
diff --git a/Source/OCMockNotificationObserver.h b/Source/OCMockNotificationObserver.h
new file mode 100644
--- /dev/null
+++ b/Source/OCMockNotificationObserver.h
@@ -0,0 +1,32 @@
+//
+
+#import <Foundation/Foundation.h>
+
+#import "OCClassMockObject.h"
+
+@interface OCMockNotificationObserver : OCClassMockObject
+{
+    NSNotificationCenter * center;
+}
+
++ (id)observerWithNotificationCenter:(NSNotificationCenter *)notificationCenter;
+
++ (id)observer;
+
+- (id)initWithNotificationCenter:(NSNotificationCenter *)notificationCenter;
+
+- (id)init;
+
+- (void)expectNotification:(NSString *)notificationName;
+
+- (void)expectNotification:(NSString *)notificationName object:(id)object;
+
+- (void)expectNotification:(NSString *)notificationName object:(id)object userInfo:(NSDictionary *)userInfo;
+
+- (void)registerNotification:(NSString *)notificationName;
+
+- (void)registerNotification:(NSString *)notificationName object:(id)object;
+
+- (void)recordNotification:(NSNotification *)notification;
+
+@end
diff --git a/Source/OCMockNotificationObserver.m b/Source/OCMockNotificationObserver.m
new file mode 100644
--- /dev/null
+++ b/Source/OCMockNotificationObserver.m
@@ -0,0 +1,117 @@
+//
+
+#import <OCMock/OCMockNotificationObserver.h>
+#import "OCClassMockObject.h"
+#import "OCProtocolMockObject.h"
+#import <OCMock/OCMockRecorder.h>
+#import "NSInvocation+OCMAdditions.h"
+#import <OCMock/OCMConstraint.h>
+
+@interface OCMockNotificationObserverToMock : NSObject
+
+- (void)recordNotification:(NSString *)notification
+                    object:(id)object
+                  userInfo:(NSDictionary *)userInfo;
+
+@end
+
+@implementation OCMockNotificationObserverToMock
+
+- (void)recordNotification:(NSString *)notification
+                    object:(id)object
+                  userInfo:(NSDictionary *)userInfo;
+{
+}
+
+@end
+
+@interface OCMockNotificationObserver (Mock)
+
+- (void)recordNotification:(NSString *)notification
+                    object:(id)object
+                  userInfo:(NSDictionary *)userInfo;
+
+@end
+
+@implementation OCMockNotificationObserver
+
++ (id)observerWithNotificationCenter:(NSNotificationCenter *)notificationCenter;
+{
+    id o = [[self alloc] initWithNotificationCenter:notificationCenter];
+    return [o autorelease];
+}
+
++ (id)observer;
+{
+    id o = [[self alloc] init];
+    return [o autorelease];
+}
+
+- (id)initWithNotificationCenter:(NSNotificationCenter *)notificationCenter;
+{
+    self = [super initWithClass:[OCMockNotificationObserverToMock class]];
+    if (self == nil)
+        return nil;
+    
+    center = notificationCenter;
+    
+    return self;
+}
+
+- (id)init
+{
+    return [self initWithNotificationCenter:[NSNotificationCenter defaultCenter]];
+}
+
+- (void)dealloc
+{
+    [center removeObserver:self];
+    
+    [super dealloc];
+}
+
+- (void)registerNotification:(NSString *)notificationName;
+{
+    [self registerNotification:notificationName object:nil];
+}
+
+- (void)registerNotification:(NSString *)notificationName object:(id)object;
+{
+    [center addObserver:self
+               selector:@selector(recordNotification:)
+                   name:notificationName
+                 object:object];
+}
+
+- (void)expectNotification:(NSString *)notificationName;
+{
+    [self expectNotification:notificationName object:OCMOCK_ANY userInfo:OCMOCK_ANY];
+}
+
+- (void)expectNotification:(NSString *)notificationName object:(id)object;
+{
+    [self expectNotification:notificationName object:object userInfo:OCMOCK_ANY];
+}
+
+- (void)expectNotification:(NSString *)notificationName object:(id)object userInfo:(NSDictionary *)userInfo;
+{
+    [[self expect] recordNotification:notificationName object:object userInfo:userInfo];
+}
+
+- (void)recordNotification:(NSNotification *)notification;
+{
+    [self recordNotification:[notification name]
+                      object:[notification object]
+                    userInfo:[notification userInfo]];
+}
+
+//---------------------------------------------------------------------------------------
+//  proxy api
+//---------------------------------------------------------------------------------------
+
+- (BOOL)orderMatters
+{
+    return YES;
+}
+
+@end
diff --git a/Source/OCMockNotificationObserverTests.h b/Source/OCMockNotificationObserverTests.h
new file mode 100644
--- /dev/null
+++ b/Source/OCMockNotificationObserverTests.h
@@ -0,0 +1,15 @@
+//
+
+#import <SenTestingKit/SenTestingKit.h>
+
+@class OCMockNotificationObserver;
+
+@interface OCMockNotificationObserverTests : SenTestCase
+{
+    NSNotificationCenter * center;
+    OCMockNotificationObserver * observer;
+    id sender1;
+    id sender2;
+}
+
+@end
diff --git a/Source/OCMockNotificationObserverTests.m b/Source/OCMockNotificationObserverTests.m
new file mode 100644
--- /dev/null
+++ b/Source/OCMockNotificationObserverTests.m
@@ -0,0 +1,146 @@
+//
+
+#import "OCMockNotificationObserverTests.h"
+#import "OCMockNotificationObserver.h"
+
+static NSString * OCMockTestNotificationOne = @"OCMockTestNotificationOne";
+static NSString * OCMockTestNotificationTwo = @"OCMockTestNotificationTwo";
+
+@implementation OCMockNotificationObserverTests
+
+- (void)setUp
+{
+    center = [NSNotificationCenter defaultCenter];
+    observer = [OCMockNotificationObserver observerWithNotificationCenter:center];
+    sender1 = @"sender1";
+    sender2 = @"sender2";
+}
+
+- (void)testRegisterNoExpect
+{
+    [observer registerNotification:OCMockTestNotificationOne object:nil];
+    
+    [observer verify];
+}
+
+- (void)testExpectAndReceiveNoteAnySender1
+{
+    [observer registerNotification:OCMockTestNotificationOne object:nil];
+    [observer expectNotification:OCMockTestNotificationOne];
+    
+    [center postNotificationName:OCMockTestNotificationOne object:sender1];
+
+    [observer verify];
+}
+
+- (void)testExpectAndReceiveNoteAnySender2
+{
+    [observer registerNotification:OCMockTestNotificationOne object:nil];
+    [observer expectNotification:OCMockTestNotificationOne];
+    
+    [center postNotificationName:OCMockTestNotificationOne object:sender2];
+    
+    [observer verify];
+}
+
+- (void)testReceiveUnexpectedNote
+{
+    [observer registerNotification:OCMockTestNotificationOne object:nil];
+    
+    STAssertThrows([center postNotificationName:OCMockTestNotificationOne object:sender1],
+                   nil);
+}
+
+- (void)testReceiveUnexpectedSecondNote
+{
+    [observer registerNotification:OCMockTestNotificationOne object:nil];
+    [observer expectNotification:OCMockTestNotificationOne];
+    
+    [center postNotificationName:OCMockTestNotificationOne object:sender1];
+
+    STAssertThrows([center postNotificationName:OCMockTestNotificationOne object:self],
+                   nil);
+}
+
+- (void)testReceiveTwoNotes
+{
+    [observer registerNotification:OCMockTestNotificationOne object:nil];
+    [observer registerNotification:OCMockTestNotificationTwo object:nil];
+    [observer expectNotification:OCMockTestNotificationOne];
+    [observer expectNotification:OCMockTestNotificationTwo];
+    
+    [center postNotificationName:OCMockTestNotificationOne object:sender1];
+    [center postNotificationName:OCMockTestNotificationTwo object:sender1];
+
+    [observer verify];
+}
+
+- (void)testReceiveTwoNotesWrongOrder
+{
+    [observer registerNotification:OCMockTestNotificationOne object:nil];
+    [observer registerNotification:OCMockTestNotificationTwo object:nil];
+    [observer expectNotification:OCMockTestNotificationOne];
+    [observer expectNotification:OCMockTestNotificationTwo];
+    
+    STAssertThrows([center postNotificationName:OCMockTestNotificationTwo object:self], nil);
+}
+
+- (void)testReceiveMultipleNotes
+{
+    [observer registerNotification:OCMockTestNotificationOne object:nil];
+    [observer registerNotification:OCMockTestNotificationTwo object:nil];
+
+    [observer expectNotification:OCMockTestNotificationOne];
+    [observer expectNotification:OCMockTestNotificationTwo];
+    [observer expectNotification:OCMockTestNotificationOne];
+    
+    [center postNotificationName:OCMockTestNotificationOne object:sender1];
+    [center postNotificationName:OCMockTestNotificationTwo object:sender1];
+    [center postNotificationName:OCMockTestNotificationOne object:sender1];
+
+    [observer verify];
+}
+
+- (void)testReceiveSpecificObject
+{
+    [observer registerNotification:OCMockTestNotificationOne object:nil];
+    [observer expectNotification:OCMockTestNotificationOne object:sender1];
+    
+    [center postNotificationName:OCMockTestNotificationOne object:sender1];
+    
+    [observer verify];
+}
+
+- (void)testReceiveWrongObject
+{
+    [observer registerNotification:OCMockTestNotificationOne object:nil];
+    [observer expectNotification:OCMockTestNotificationOne object:sender1];
+    
+    STAssertThrows([center postNotificationName:OCMockTestNotificationOne object:sender2], nil);
+}
+
+- (void)testReceiveSpecificUserInfo
+{
+    NSDictionary * expectedUserInfo = [NSDictionary dictionaryWithObject:@"Joe" forKey:@"Name"];
+    [observer registerNotification:OCMockTestNotificationOne object:nil];
+    [observer expectNotification:OCMockTestNotificationOne object:sender1 userInfo:expectedUserInfo];
+
+    NSDictionary * sentUserInfo = [NSDictionary dictionaryWithObject:@"Joe" forKey:@"Name"];
+    [center postNotificationName:OCMockTestNotificationOne object:sender1 userInfo:sentUserInfo];
+    
+    [observer verify];
+}
+
+- (void)testReceiveWrongUserInfo
+{
+    NSDictionary * expectedUserInfo = [NSDictionary dictionaryWithObject:@"Joe" forKey:@"Name"];
+    [observer registerNotification:OCMockTestNotificationOne object:nil];
+    [observer expectNotification:OCMockTestNotificationOne object:sender1 userInfo:expectedUserInfo];
+    
+    NSDictionary * sentUserInfo = [NSDictionary dictionaryWithObject:@"Jane" forKey:@"Name"];
+
+    STAssertThrows([center postNotificationName:OCMockTestNotificationOne object:sender1 userInfo:sentUserInfo],
+                   nil);
+}
+
+@end
diff --git a/Source/OCMockObject.m b/Source/OCMockObject.m
--- a/Source/OCMockObject.m
+++ b/Source/OCMockObject.m
@@ -1,6 +1,6 @@
 //---------------------------------------------------------------------------------------
-//  $Id: OCMockObject.m 21 2008-01-24 18:59:39Z erik $
-//  Copyright (c) 2004-2008 by Mulle Kybernetik. See License file for details.
+//	$Id: OCMockObject.m 21 2008-01-24 18:59:39Z erik $
+//	Copyright (c) 2004-2008 by Mulle Kybernetik. See License file for details.
 //---------------------------------------------------------------------------------------
 
 #import <OCMock/OCMockObject.h>
@@ -17,7 +17,7 @@
 @implementation OCMockObject
 
 //---------------------------------------------------------------------------------------
-//  factory methods
+//	factory methods
 //---------------------------------------------------------------------------------------
 
 + (id)mockForClass:(Class)aClass
@@ -51,7 +51,7 @@
 
 
 //---------------------------------------------------------------------------------------
-//  init and dealloc
+//	init and dealloc
 //---------------------------------------------------------------------------------------
 
 - (id)init
@@ -81,7 +81,7 @@
 
 
 //---------------------------------------------------------------------------------------
-//  public api
+//	public api
 //---------------------------------------------------------------------------------------
 
 - (id)stub
@@ -118,24 +118,32 @@
 	}
 }
 
+- (BOOL)orderMatters
+{
+	return NO;
+}
 
 //---------------------------------------------------------------------------------------
-//  proxy api
+//	proxy api
 //---------------------------------------------------------------------------------------
 
 - (void)forwardInvocation:(NSInvocation *)anInvocation
 {
 	OCMockRecorder *recorder = nil;
 	int			   i;
+	int			   count;
 
-	for(i = 0; i < [recorders count]; i++)
+	count = [recorders count];
+	if ([self orderMatters])
+		count = MIN(count, 1);
+	for(i = 0; i < count; i++)
 	{
 		recorder = [recorders objectAtIndex:i];
 		if([recorder matchesInvocation:anInvocation])
 			break;
 	}
 	
-	if(i < [recorders count]) 
+	if(i < count) 
 	{
 		if ([expectations containsObject:recorder])
 		{
@@ -147,7 +155,7 @@
 	else if(isNice == NO)
 	{
 		NSException *exception = [NSException exceptionWithName:NSInternalInconsistencyException reason:
-			[NSString stringWithFormat:@"%@: unexpected method invoked: %@ %@",  [self description], 
+			[NSString stringWithFormat:@"%@: unexpected method invoked: %@ %@",	 [self description], 
 			[anInvocation invocationDescription], [self _recorderDescriptions:NO]] userInfo:nil];
 		[exceptions addObject:exception];
 		[exception raise];
@@ -157,7 +165,7 @@
 
 
 //---------------------------------------------------------------------------------------
-//  descriptions
+//	descriptions
 //---------------------------------------------------------------------------------------
 
 - (NSString *)_recorderDescriptions:(BOOL)onlyExpectations
